---
description: Standards and best practices for Shelly script development
globs: **/*.js, scripts/**/*.js
alwaysApply: true
---

# Shelly Scripting Standards

This document outlines standards and best practices for developing scripts for Shelly devices based on the official Shelly scripting API.

## General Rules

- Scripts run on a modified version of Espruino with limitations
- Be aware of resource limits:
  - Max 5 timers per script
  - Max 5 event subscriptions per script
  - Max 5 status change subscriptions per script
  - Max 5 RPC calls per script
  - Max 10 MQTT topic subscriptions per script
  - Max 5 HTTP registered endpoints per script

## Code Structure & Performance

- Avoid infinite or long-running loops that may crash the device
- Use named functions instead of nested anonymous functions
- Limit nested anonymous functions to 2-3 levels maximum
- Keep scripts small and efficient to avoid memory issues

### ✅ Correct - Use named functions:
```javascript
function processHttpResponse(result, error_code, error) {
  if (error_code !== 0) {
    // process error
  } else {
    // process result
  }
}

Shelly.call("HTTP.GET", {url: "http://example.com/"}, processHttpResponse);
```

### ❌ Incorrect - Deep nesting of anonymous functions:
```javascript
Shelly.call(
  "HTTP.GET",
  {url: "http://example.com/"},
  function(result, error_code, error_message) {
    if (error_code !== 0) {
      // process error
      Shelly.call("Switch.Set", {id: 0, on: true}, function(innerResult) {
        Shelly.call("Switch.GetStatus", {id: 0}, function() {
          // Too many nested anonymous functions - will likely crash
        });
      });
    }
  }
);
```

## API Usage

### Core Shelly APIs

- Use `Shelly.call()` for RPC method invocation
- Use `Shelly.addEventHandler()` & `Shelly.addStatusHandler()` for event handling
- Use `Shelly.getComponentConfig()` & `Shelly.getComponentStatus()` for synchronous data access
- Remember to clean up handlers with `Shelly.removeEventHandler()` & `Shelly.removeStatusHandler()`

### ✅ Correct - Clean up event handlers:
```javascript
let eventHandler = Shelly.addEventHandler(function(eventData) {
  // Process event
});

// When done with the handler
Shelly.removeEventHandler(eventHandler);
```

### Timer Management

- Always store timer handles and clear them when no longer needed
- Use `Timer.set()` for delayed execution or repeating tasks
- Clean up with `Timer.clear()` when timers are no longer needed

### ✅ Correct - Timer management:
```javascript
// Create a timer that runs every 5 seconds
let timerHandle = Timer.set(5000, true, function() {
  // Repeating task
});

// Clear when no longer needed
Timer.clear(timerHandle);
```

## Storage Management

- Use `Script.storage` for persistent storage (introduced in v1.5.0)
- Be aware of storage limits:
  - Max key length: 16 bytes
  - Max value length: 1024 bytes
  - Max number of items: 12
- Storage only supports string values (use JSON serialization for objects)

### ✅ Correct - Using Script.storage:
```javascript
// Store a value
let counter = Script.storage.getItem('counter');
if (typeof counter !== 'string') {
  counter = 0;
} else {
  counter = JSON.parse(counter) + 1;
}
Script.storage.setItem('counter', JSON.stringify(counter));
```

## MQTT Integration

- Check connection status with `MQTT.isConnected()`
- Properly manage subscriptions with `MQTT.subscribe()` and `MQTT.unsubscribe()`
- Set up proper handlers with `MQTT.setConnectHandler()` and `MQTT.setDisconnectHandler()`

### ✅ Correct - MQTT subscription:
```javascript
if (MQTT.isConnected()) {
  MQTT.subscribe("my/topic", function(topic, message) {
    // Handle message
  });
}

// Set connection handlers
MQTT.setConnectHandler(function() {
  // Connected to broker
});
```

## HTTP Endpoints

- Register endpoints with `HTTPServer.registerEndpoint()`
- Handle different HTTP methods appropriately
- Always send responses using the provided `send` function
- Be aware that endpoints require authentication if enabled on the device

### ✅ Correct - HTTP endpoint:
```javascript
HTTPServer.registerEndpoint("myendpoint", function(request, response) {
  if (request.method === "GET") {
    response.code = 200;
    response.body = JSON.stringify({status: "ok"});
    response.headers = [["Content-Type", "application/json"]];
    response.send();
  }
});
```

## Error Handling

- Implement proper error handling with try/catch blocks
- Log errors with the `print()` function
- Be careful with complex operations that may crash the device

### ✅ Correct - Error handling:
```javascript
try {
  let data = JSON.parse(someInput);
  // Process data
} catch (e) {
  print("Error parsing JSON: " + e);
}
```

## String Handling

- Strings use byte arrays for storage (not UTF-16)
- UTF-8 encoding is used for Unicode characters
- Use `\xHH` for byte encoding in string literals
- JSON operations use proper UTF-8 encoding/decoding 